[{"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\ScrollToTop.js":"1","C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\pages\\CrudStaffs.js":"2","C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\pages\\Login.js":"3","C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\AppConfig.js":"4","C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\components\\Dashboard.js":"5","C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\index.js":"6","C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\Actions\\users.actions.js":"7","C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\AppFooter.js":"8","C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\Helpers\\fake-backend.js":"9","C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\AppMenu.js":"10","C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\App.js":"11","C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\AppTopbar.js":"12","C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\Routes\\PrivateRoute.js":"13","C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\Helpers\\history.js":"14","C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\pages\\CrudProducts.js":"15"},{"size":308,"mtime":1647007569000,"results":"16","hashOfConfig":"17"},{"size":15289,"mtime":1663953151096,"results":"18","hashOfConfig":"17"},{"size":3787,"mtime":1663951205399,"results":"19","hashOfConfig":"17"},{"size":3956,"mtime":1663782185859,"results":"20","hashOfConfig":"17"},{"size":351104,"mtime":1663972730128,"results":"21","hashOfConfig":"17"},{"size":559,"mtime":1663368431042,"results":"22","hashOfConfig":"17"},{"size":3627,"mtime":1663371743929,"results":"23","hashOfConfig":"17"},{"size":236,"mtime":1661912715064,"results":"24","hashOfConfig":"17"},{"size":5094,"mtime":1663365832724,"results":"25","hashOfConfig":"17"},{"size":4143,"mtime":1663782185862,"results":"26","hashOfConfig":"17"},{"size":10306,"mtime":1663955252950,"results":"27","hashOfConfig":"17"},{"size":2347,"mtime":1663782185882,"results":"28","hashOfConfig":"17"},{"size":960,"mtime":1663439741985,"results":"29","hashOfConfig":"17"},{"size":113,"mtime":1663288815724,"results":"30","hashOfConfig":"17"},{"size":16674,"mtime":1663954770574,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1mtznpy",{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"34"},"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\ScrollToTop.js",[],["73","74"],"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\pages\\CrudStaffs.js",["75","76","77","78"],"import React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { Toast } from 'primereact/toast';\nimport { Button } from 'primereact/button';\nimport { FileUpload } from 'primereact/fileupload';\nimport { Rating } from 'primereact/rating';\nimport { Toolbar } from 'primereact/toolbar';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport { RadioButton } from 'primereact/radiobutton';\nimport { InputNumber } from 'primereact/inputnumber';\nimport { Dialog } from 'primereact/dialog';\nimport { InputText } from 'primereact/inputtext';\nimport { StaffService } from '../service/StaffService';\nimport { Dropdown } from 'primereact/dropdown';\n\nconst CrudStaffs = () => {\n    let emptyStaff = {\n       id: null,\n      firstName: \"\",\n      lastName: \"\",\n      maidenName: \"\",\n      age: 0,\n      gender: \"\",\n      email: \"\",\n      type:\"\",\n      phone: \"\",\n      username: \"\",\n      password: \"\",\n      birthDate: \"\",\n      image: \"\",\n      bloodGroup: \"\",\n      height: 0,\n      weight: 0 ,\n    };\n\n    const [staffs, setStaffs] = useState(null);\n    const [StaffDialog, setStaffDialog] = useState(false);\n    const [deleteStaffDialog, setDeleteStaffDialog] = useState(false);\n    const [deleteStaffsDialog, setDeleteStaffsDialog] = useState(false);\n    const [staff, setStaff] = useState(emptyStaff);\n    const [selectedStaffs, setSelectedStaffs] = useState(null);\n    const [submitted, setSubmitted] = useState(false);\n    const [globalFilter, setGlobalFilter] = useState(null);\n    const toast = useRef(null);\n    const dt = useRef(null);\n    const [gender, setGender] = useState('');\n\n    const genders = [\n        { name: 'Male', code: 'Mr' },\n        { name: 'Female', code: 'MMe' },\n    ];\n    useEffect(() => {\n        const staffService = new StaffService();\n        staffService.getStaffs().then(data => setStaffs(data)\n        );\n        //console.log(staffs)\n    }, []);\n\n    const openNew = () => {\n        setStaff(emptyStaff);\n        setSubmitted(false);\n        setStaffDialog(true);\n    }\n\n    const hideDialog = () => {\n        setSubmitted(false);\n        setStaffDialog(false);\n    }\n\n    const hideDeleteStaffDialog = () => {\n        setDeleteStaffDialog(false);\n    }\n\n    const hideDeleteStaffsDialog = () => {\n        setDeleteStaffsDialog(false);\n    }\n\n    const saveStaff = () => {\n        setSubmitted(true);\n\n        if (staff.username.trim()) {\n            let _staffs = [...staffs];\n            let _staff = { ...staff };\n            if (staff.id) {\n                const index = findIndexById(staff.id);\n\n                _staffs[index] = _staff;\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Updated', life: 3000 });\n            }\n            else {\n                _staff.id = createId();\n                _staff.image = 'product-placeholder.svg';\n                _staffs.push(_staff);\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Created', life: 3000 });\n            }\n\n            setStaffs(_staffs);\n            setStaffDialog(false);\n            setStaff(emptyStaff);\n        }\n    }\n\n    const editStaff = (staff) => {\n        setStaff({ ...staff });\n        setStaffDialog(true);\n    }\n\n    const confirmDeleteStaff = (staff) => {\n        setStaff(staff);\n        setDeleteStaffDialog(true);\n    }\n\n    const deleteStaff = () => {\n        let _staffs = staffs.filter(val => val.id !== staff.id);\n        setStaffs(_staffs);\n        setDeleteStaffDialog(false);\n        setStaff(emptyStaff);\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Deleted', life: 3000 });\n    }\n\n    const findIndexById = (id) => {\n        let index = -1;\n        for (let i = 0; i < staffs.length; i++) {\n            if (staffs[i].id === id) {\n                index = i;\n                break;\n            }\n        }\n\n        return index;\n    }\n\n    const createId = () => {\n        let id = '';\n        let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        for (let i = 0; i < 5; i++) {\n            id += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        return id;\n    }\n\n    const exportCSV = () => {\n        dt.current.exportCSV();\n    }\n\n    const confirmDeleteSelected = () => {\n        setDeleteStaffsDialog(true);\n    }\n\n    const deleteSelectedStaffs = () => {\n        let _staffs = staffs.filter(val => !selectedStaffs.includes(val));\n        setStaffs(_staffs);\n        setDeleteStaffsDialog(false);\n        setSelectedStaffs(null);\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Products Deleted', life: 3000 });\n    }\n\n    const onCategoryChange = (e) => {\n        let _staff = { ...staff };\n        _staff['type'] = e.value;\n        setStaff(_staff);\n    }\n\n    const onInputChange = (e, name) => {\n        const val = (e.target && e.target.value) || '';\n        let _staff = { ...staff };\n        _staff[`${name}`] = val;\n\n        setStaff(_staff);\n    }\n\n    const onInputNumberChange = (e, name) => {\n        const val = e.value || 0;\n        let _staff = { ...staff };\n        _staff[`${name}`] = val;\n\n        setStaff(_staff);\n    }\n\n    const leftToolbarTemplate = () => {\n        return (\n            <React.Fragment>\n                <div className=\"my-0\">\n                    <Button label=\"New\" icon=\"pi pi-plus\" className=\"p-button-success mr-2\" onClick={openNew} />\n                    <Button label=\"Delete\" icon=\"pi pi-trash\" className=\"p-button-danger\" onClick={confirmDeleteSelected} disabled={!selectedStaffs || !selectedStaffs.length} />\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    const rightToolbarTemplate = () => {\n        return (\n            <React.Fragment>\n                <FileUpload mode=\"basic\" accept=\"image/*\" maxFileSize={1000000} label=\"Import\" chooseLabel=\"Import\" className=\"mr-2 inline-block\" />\n                <Button label=\"Export\" icon=\"pi pi-upload\" className=\"p-button-help\" onClick={exportCSV} />\n            </React.Fragment>\n        )\n    }\n\n    const codeBodyTemplate = (rowData) => {\n        return (\n            <>\n                <span className=\"p-column-title\">Code</span>\n                {rowData.id}\n            </>\n        );\n    }\n\n    const nameBodyTemplate = (rowData) => {\n        return (\n            <>\n                <span className=\"p-column-title\">Name</span>\n                {rowData.username}\n            </>\n        );\n    }\n\n    const imageBodyTemplate = (rowData) => {\n        return (\n            <>\n                <span className=\"p-column-title\">Image</span>\n                <img src={`${rowData.image}`} alt={rowData.image} className=\"shadow-2\" width=\"30\" />\n            </>\n        )\n    }\n\n\n    const categoryBodyTemplate = (rowData) => {\n        return (\n            <>\n                <span className=\"p-column-title\">Type</span>\n                {rowData.type}\n            </>\n        );\n    }\n\n    const statusBodyTemplate = (rowData) => {\n        return (\n            <>\n                <span className=\"p-column-title\">Status</span>\n                <span className={`product-badge status-${rowData.gender.toLowerCase()}`}>{rowData.gender}</span>\n            </>\n        )\n    }\n\n    const actionBodyTemplate = (rowData) => {\n        return (\n            <div className=\"actions\">\n                <Button icon=\"pi pi-pencil\" className=\"p-button-rounded p-button-success mr-2\" onClick={() => editStaff(rowData)} />\n                <Button icon=\"pi pi-trash\" className=\"p-button-rounded p-button-warning mt-2\" onClick={() => confirmDeleteStaff(rowData)} />\n            </div>\n        );\n    }\n\n    const header = (\n        <div className=\"flex flex-column md:flex-row md:justify-content-between md:align-items-center\">\n            <h5 className=\"m-0\">Manage Staffs</h5>\n            <span className=\"block mt-2 md:mt-0 p-input-icon-left\">\n                <i className=\"pi pi-search\" />\n                <InputText type=\"search\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder=\"Search...\" />\n            </span>\n        </div>\n    );\n\n    const staffDialogFooter = (\n        <>\n            <Button label=\"Cancel\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDialog} />\n            <Button label=\"Save\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={saveStaff} />\n        </>\n    );\n    const deleteStaffDialogFooter = (\n        <>\n            <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteStaffDialog} />\n            <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteStaff} />\n        </>\n    );\n    const deleteStaffsDialogFooter = (\n        <>\n            <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteStaffsDialog} />\n            <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteSelectedStaffs} />\n        </>\n    );\n\n    return (\n        <div className=\"grid crud-demo\">\n            <div className=\"col-12\">\n                <div className=\"card\">\n                    <Toast ref={toast} />\n                    <Toolbar className=\"mb-2\" left={leftToolbarTemplate} right={rightToolbarTemplate}></Toolbar>\n\n                    <DataTable ref={dt} value={staffs} selection={selectedStaffs} onSelectionChange={(e) => setSelectedStaffs(e.value)}\n                        dataKey=\"id\" paginator rows={10} rowsPerPageOptions={[5, 10, 25]} className=\"datatable-responsive\"\n                        paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\n                        currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} staffs\"\n                        globalFilter={globalFilter} emptyMessage=\"No staffs found.\" header={header} responsiveLayout=\"scroll\">\n                        <Column selectionMode=\"multiple\" headerStyle={{ width: '2rem'}}></Column>\n                        <Column field=\"code\" header=\"Code\" sortable body={codeBodyTemplate} ></Column>\n                        <Column field=\"name\" header=\"Name\" sortable body={nameBodyTemplate} ></Column>\n                        <Column header=\"Image\" body={imageBodyTemplate} ></Column>\n                        <Column field=\"type\" header=\"Type\" sortable body={categoryBodyTemplate}></Column>\n                        <Column field=\"gender\" header=\"Gender\" body={statusBodyTemplate} sortable ></Column>\n                        <Column body={actionBodyTemplate}></Column>\n                    </DataTable>\n\n                    <Dialog visible={StaffDialog} style={{ width: '850px' }} header=\"Staff Details\" modal className=\"p-fluid\" footer={staffDialogFooter} onHide={hideDialog}>\n                        {staff.image && <img src={`${staff.image}`} alt={staff.image} width=\"150\" className=\"mt-0 mx-auto mb-5 block shadow-2\" />}\n                        <div className=\"field\">\n                            <label htmlFor=\"name\">Name</label>\n                            <InputText id=\"name\" value={staff.username} onChange={(e) => onInputChange(e, 'username')} required autoFocus className={classNames({ 'p-invalid': submitted && !staff.name })} />\n                            {submitted && !staff.name && <small className=\"p-invalid\">Name is required.</small>}\n                        </div>\n                        <div className=\"field\">\n                            <label htmlFor=\"description\">Description</label>\n                            <InputTextarea id=\"description\" value={staff.description} onChange={(e) => onInputChange(e, 'description')} required rows={3} cols={20} />\n                        </div>\n\n                        <div className=\"field\">\n                            <label className=\"mb-3\">Type</label>\n                            <div className=\"formgrid grid\">\n                                <div className=\"field-radiobutton col-6\">\n                                    <RadioButton inputId=\"category1\" name=\"category\" value=\"AdminTech\" onChange={onCategoryChange} checked={staff.type === 'Admin Tech'} />\n                                    <label htmlFor=\"category1\">Admin Tech</label>\n                                </div>\n                                <div className=\"field-radiobutton col-6\">\n                                    <RadioButton inputId=\"category2\" name=\"category\" value=\"AdminMet\" onChange={onCategoryChange} checked={staff.type === 'Admin Metier'} />\n                                    <label htmlFor=\"category2\">Admin Metier</label>\n                                </div>\n                                <div className=\"field-radiobutton col-6\">\n                                    <RadioButton inputId=\"category3\" name=\"category\" value=\"Pharmacy\" onChange={onCategoryChange} checked={staff.type === 'Pharmacy'} />\n                                    <label htmlFor=\"category3\">Pharmacy</label>\n                                </div>\n                                <div className=\"field-radiobutton col-6\">\n                                    <RadioButton inputId=\"category4\" name=\"category\" value=\"Staff\" onChange={onCategoryChange} checked={staff.type === 'Staff'} />\n                                    <label htmlFor=\"category4\">Staff</label>\n                                </div>\n                            </div>\n                        </div>\n\n                        \n                        <div className=\"field\">\n                                <label  className=\"mb-3\" htmlFor=\"dropdown\">Gender</label>\n                                <Dropdown className=\"col-6\" id=\"dropdown\" options={genders} value={gender} onChange={(e) => setGender(e.value)} optionLabel=\"name\" className=\"p-invalid\"/>\n                            </div>\n                     \n\n                    </Dialog>\n\n                    <Dialog visible={deleteStaffDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteStaffDialogFooter} onHide={hideDeleteStaffDialog}>\n                        <div className=\"flex align-items-center justify-content-center\">\n                            <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem' }} />\n                            {staff && <span>Are you sure you want to delete <b>{staff.username}</b>?</span>}\n                        </div>\n                    </Dialog>\n\n                    <Dialog visible={deleteStaffsDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteStaffsDialogFooter} onHide={hideDeleteStaffsDialog}>\n                        <div className=\"flex align-items-center justify-content-center\">\n                            <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem' }} />\n                            {staff && <span>Are you sure you want to delete the selected staffs?</span>}\n                        </div>\n                    </Dialog>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nconst comparisonFn = function (prevProps, nextProps) {\n    return prevProps.location.pathname === nextProps.location.pathname;\n};\n\nexport default React.memo(CrudStaffs, comparisonFn);",["79","80"],"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\pages\\Login.js",["81","82","83","84","85"],"import React, { useState,useRef } from 'react'\r\nimport { InputText } from 'primereact/inputtext'\r\nimport { Checkbox } from 'primereact/checkbox'\r\nimport { Button } from 'primereact/button'\r\nimport { history } from '../Helpers/history'\r\nimport { Toast } from 'primereact/toast';\r\nimport { useFormik } from 'formik'\r\nimport { useUserActions } from '../Actions/users.actions'\r\nimport loginImg from '../assets/login.png'\r\nconst Login = props => {\r\n  const [checked, setChecked] = useState(false)\r\n  const userActions = useUserActions()\r\n  const [showMessage, setShowMessage] = useState(false)\r\n  const [formData, setFormData] = useState({})\r\n  const toast = useRef(null);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      id: 1,\r\n      username: '',\r\n      password: ''\r\n    },\r\n    validate: data => {\r\n      let errors = {}\r\n\r\n      if (!data.username) {\r\n        errors.name = 'Name is required.'\r\n      }\r\n\r\n      if (!data.password) {\r\n        errors.password = 'Password is required.'\r\n      }\r\n\r\n      return errors\r\n    },\r\n    onSubmit: data => {\r\n      // setFormData(data)\r\n      //setShowMessage(true)\r\n      // console.log(data)\r\n      userActions.register(data).then((data) => {\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Register', life: 3000 });\r\n      })\r\n      formik.resetForm()\r\n    }\r\n  })\r\n\r\n  return (\r\n\r\n    <div className=\"grid align-items-center justify-content-center\">   <Toast ref={toast} />\r\n      <div className=\"grid col-12 justify-content-center\">\r\n   \r\n        <img\r\n          src={loginImg}\r\n          width=\"300\"\r\n          style={{ position: 'relative' }}\r\n          alt=\"login\"\r\n        />\r\n      </div>\r\n      <div className=\"surface-card p-4 shadow-2 border-round w-full lg:w-6\">\r\n        <div className=\"text-center mb-5\">\r\n          <div className=\"text-900 text-3xl font-medium mb-3\">Welcome Back</div>\r\n        </div>\r\n\r\n        <div>\r\n          <form onSubmit={formik.handleSubmit}>\r\n            <label\r\n              htmlFor=\"username\"\r\n              className=\"block text-900 font-medium mb-2\"\r\n            >\r\n              username\r\n            </label>\r\n            <InputText\r\n              id=\"username\"\r\n              name=\"username\"\r\n              value={formik.values.username}\r\n              onChange={formik.handleChange}\r\n              autoFocus\r\n              className=\"w-full mb-3\"\r\n            />\r\n            <label\r\n              htmlFor=\"password\"\r\n              className=\"block text-900 font-medium mb-2\"\r\n            >\r\n              Password\r\n            </label>\r\n            <InputText\r\n              id=\"password\"\r\n              name=\"password\"\r\n              value={formik.values.password}\r\n              onChange={formik.handleChange}\r\n              toggleMask\r\n              className=\"w-full mb-3\"\r\n            />\r\n            <div className=\"flex align-items-center justify-content-between mb-6\">\r\n              <div className=\"flex align-items-center\">\r\n                <Checkbox\r\n                  id=\"rememberme\"\r\n                  onChange={e => setChecked(e.checked)}\r\n                  checked={checked}\r\n                  className=\"mr-2\"\r\n                />\r\n                <label htmlFor=\"rememberme\">Remember me</label>\r\n              </div>\r\n            </div>\r\n\r\n            {/* [{\"id\":1,\"username\":\"user\",\"password\":\"password\"}] */}\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              label=\"Sign In\"\r\n              icon=\"pi pi-user\"\r\n              className=\"w-full\"\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst comparisonFn = function (prevProps, nextProps) {\r\n  return prevProps.location.pathname === nextProps.location.pathname\r\n}\r\n\r\nexport default React.memo(Login, comparisonFn)\r\n",["86","87"],"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\AppConfig.js",["88","89","90","91","92","93","94"],"import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { RadioButton } from 'primereact/radiobutton';\r\nimport { InputSwitch } from 'primereact/inputswitch';\r\nimport classNames from 'classnames';\r\nimport {Button} from \"primereact/button\";\r\n\r\nexport const AppConfig = (props) => {\r\n\r\n    const [active, setActive] = useState(false);\r\n    const [scale, setScale] = useState(14);\r\n    const [scales] = useState([12,13,14,15,16]);\r\n    const [theme, setTheme] = useState('tailwind-light');\r\n    const config = useRef(null);\r\n    let outsideClickListener = useRef(null);\r\n\r\n    const unbindOutsideClickListener = useCallback(() => {\r\n        if (outsideClickListener.current) {\r\n            document.removeEventListener('click', outsideClickListener.current);\r\n            outsideClickListener.current = null;\r\n        }\r\n    }, []);\r\n\r\n    const hideConfigurator = useCallback((event) => {\r\n        setActive(false);\r\n        unbindOutsideClickListener();\r\n        event.preventDefault();\r\n    }, [unbindOutsideClickListener]);\r\n\r\n    const bindOutsideClickListener = useCallback(() => {\r\n        if (!outsideClickListener.current) {\r\n            outsideClickListener.current = (event) => {\r\n                if (active && isOutsideClicked(event)) {\r\n                    hideConfigurator(event);\r\n                }\r\n            };\r\n            document.addEventListener('click', outsideClickListener.current);\r\n        }\r\n    }, [active, hideConfigurator]);\r\n\r\n    useEffect(() => {\r\n        if (active) {\r\n            bindOutsideClickListener()\r\n        }\r\n        else {\r\n            unbindOutsideClickListener()\r\n        }\r\n    }, [active, bindOutsideClickListener, unbindOutsideClickListener]);\r\n\r\n    const isOutsideClicked = (event) => {\r\n        return !(config.current.isSameNode(event.target) || config.current.contains(event.target));\r\n    }\r\n\r\n    const decrementScale = () => {\r\n        setScale((prevState) => --prevState);\r\n    }\r\n\r\n    const incrementScale = () => {\r\n        setScale((prevState) => ++prevState);\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.documentElement.style.fontSize = scale + 'px';\r\n    }, [scale])\r\n\r\n    const toggleConfigurator = (event) => {\r\n        setActive(prevState => !prevState);\r\n    }\r\n\r\n    const configClassName = classNames('layout-config', {\r\n        'layout-config-active': active\r\n    })\r\n\r\n    const replaceLink = useCallback((linkElement, href, callback) => {\r\n        if (isIE()) {\r\n            linkElement.setAttribute('href', href);\r\n\r\n            if (callback) {\r\n                callback();\r\n            }\r\n        }\r\n        else {\r\n           \r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        let themeElement = document.getElementById('theme-link');\r\n        const themeHref = 'assets/themes/' + theme + '/theme.css';\r\n        replaceLink(themeElement, themeHref);\r\n\r\n    },[theme,replaceLink])\r\n\r\n    const isIE = () => {\r\n        return /(MSIE|Trident\\/|Edge\\/)/i.test(window.navigator.userAgent)\r\n    }\r\n\r\n    const changeTheme = (e, theme, scheme) => {\r\n        props.onColorModeChange(scheme);\r\n        setTheme(theme);\r\n    }\r\n\r\n    return (\r\n        <div ref={config} className={configClassName} id={\"layout-config\"}>\r\n            <button className=\"layout-config-button p-link backg\" id=\"layout-config-button\" onClick={toggleConfigurator}>\r\n                <i className=\"pi pi-cog\"></i>\r\n            </button>\r\n            {/* <Button className=\" \" icon=\"pi pi-times\" onClick={hideConfigurator}/> */}\r\n\r\n            <div className=\"\">\r\n\r\n{/*               \r\n                <div className=\"grid free-themes\">\r\n                    <div className=\"col-3 text-center\" >\r\n                        <button className=\"p-link\" onClick={e => changeTheme(e, 'tailwind-light', 'light')}>\r\n                          \r\n                        </button>\r\n                    </div>\r\n                </div> */}\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n",["95","96"],"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\components\\Dashboard.js",["97","98","99"],"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\index.js",[],"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\Actions\\users.actions.js",[],["100","101"],"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\AppFooter.js",[],"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\Helpers\\fake-backend.js",[],["102","103"],"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\AppMenu.js",[],["104","105"],"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\App.js",["106","107","108"],"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\AppTopbar.js",[],"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\Routes\\PrivateRoute.js",[],"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\Helpers\\history.js",[],"C:\\Users\\VirWus\\Documents\\GitHub\\react-electron\\src\\pages\\CrudProducts.js",["109"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport classNames from 'classnames';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Button } from 'primereact/button';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport { Rating } from 'primereact/rating';\r\nimport { Toolbar } from 'primereact/toolbar';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { RadioButton } from 'primereact/radiobutton';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { ProductService } from '../service/ProductService';\r\nimport Barcode from 'react-barcode';\r\n\r\nconst CrudProducts = () => {\r\n    let emptyProduct = {\r\n        id: null,\r\n        title: '',\r\n        image: null,\r\n        description: '',\r\n        category: null,\r\n        price: 0,\r\n        quantity: 0,\r\n        rating: 0,\r\n        inventoryStatus: 'INSTOCK'\r\n    };\r\n\r\n    const [products, setProducts] = useState(null);\r\n    const [productDialog, setProductDialog] = useState(false);\r\n    const [deleteProductDialog, setDeleteProductDialog] = useState(false);\r\n    const [deleteProductsDialog, setDeleteProductsDialog] = useState(false);\r\n    const [product, setProduct] = useState(emptyProduct);\r\n    const [selectedProducts, setSelectedProducts] = useState(null);\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const toast = useRef(null);\r\n    const dt = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const productService = new ProductService();\r\n        productService.getProducts().then(data => setProducts(data));\r\n    }, []);\r\n\r\n    const formatCurrency = (value) => {\r\n        return value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\r\n    }\r\n\r\n    const openNew = () => {\r\n        setProduct(emptyProduct);\r\n        setSubmitted(false);\r\n        setProductDialog(true);\r\n    }\r\n\r\n    const hideDialog = () => {\r\n        setSubmitted(false);\r\n        setProductDialog(false);\r\n    }\r\n\r\n    const hideDeleteProductDialog = () => {\r\n        setDeleteProductDialog(false);\r\n    }\r\n\r\n    const hideDeleteProductsDialog = () => {\r\n        setDeleteProductsDialog(false);\r\n    }\r\n\r\n    const saveProduct = () => {\r\n        setSubmitted(true);\r\n\r\n        if (product.title.trim()) {\r\n            let _products = [...products];\r\n            let _product = { ...product };\r\n            if (product.id) {\r\n                const index = findIndexById(product.id);\r\n\r\n                _products[index] = _product;\r\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Updated', life: 3000 });\r\n            }\r\n            else {\r\n                _product.id = createId();\r\n                _product.image = 'product-placeholder.svg';\r\n                _products.push(_product);\r\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Created', life: 3000 });\r\n            }\r\n\r\n            setProducts(_products);\r\n            setProductDialog(false);\r\n            setProduct(emptyProduct);\r\n        }\r\n    }\r\n\r\n    const editProduct = (product) => {\r\n        setProduct({ ...product });\r\n        setProductDialog(true);\r\n    }\r\n\r\n    const confirmDeleteProduct = (product) => {\r\n        setProduct(product);\r\n        setDeleteProductDialog(true);\r\n    }\r\n\r\n    const deleteProduct = () => {\r\n        let _products = products.filter(val => val.id !== product.id);\r\n        setProducts(_products);\r\n        setDeleteProductDialog(false);\r\n        setProduct(emptyProduct);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Deleted', life: 3000 });\r\n    }\r\n\r\n    const findIndexById = (id) => {\r\n        let index = -1;\r\n        for (let i = 0; i < products.length; i++) {\r\n            if (products[i].id === id) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    const createId = () => {\r\n        let id = '';\r\n        let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        for (let i = 0; i < 5; i++) {\r\n            id += chars.charAt(Math.floor(Math.random() * chars.length));\r\n        }\r\n        return id;\r\n    }\r\n\r\n    const exportCSV = () => {\r\n        dt.current.exportCSV();\r\n    }\r\n\r\n    const confirmDeleteSelected = () => {\r\n        setDeleteProductsDialog(true);\r\n    }\r\n\r\n    const deleteSelectedProducts = () => {\r\n        let _products = products.filter(val => !selectedProducts.includes(val));\r\n        setProducts(_products);\r\n        setDeleteProductsDialog(false);\r\n        setSelectedProducts(null);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Products Deleted', life: 3000 });\r\n    }\r\n\r\n    const onCategoryChange = (e) => {\r\n        let _product = { ...product };\r\n        _product['category'] = e.value;\r\n        setProduct(_product);\r\n    }\r\n\r\n    const onInputChange = (e, name) => {\r\n        const val = (e.target && e.target.value) || '';\r\n        let _product = { ...product };\r\n        _product[`${name}`] = val;\r\n\r\n        setProduct(_product);\r\n    }\r\n\r\n    const onInputNumberChange = (e, name) => {\r\n        const val = e.value || 0;\r\n        let _product = { ...product };\r\n        _product[`${name}`] = val;\r\n\r\n        setProduct(_product);\r\n    }\r\n\r\n    const leftToolbarTemplate = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"my-0\">\r\n                    <Button label=\"New\" icon=\"pi pi-plus\" className=\"p-button-success mr-2\" onClick={openNew} />\r\n                    <Button label=\"Delete\" icon=\"pi pi-trash\" className=\"p-button-danger\" onClick={confirmDeleteSelected} disabled={!selectedProducts || !selectedProducts.length} />\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const rightToolbarTemplate = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <FileUpload mode=\"basic\" accept=\"image/*\" maxFileSize={1000000} label=\"Import\" chooseLabel=\"Import\" className=\"mr-2 inline-block\" />\r\n                <Button label=\"Export\" icon=\"pi pi-upload\" className=\"p-button-help\" onClick={exportCSV} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const codeBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">Code</span>\r\n                {rowData.code}\r\n            </>\r\n        );\r\n    }\r\n\r\n    const nameBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">Name</span>\r\n                {rowData.title}\r\n            </>\r\n        );\r\n    }\r\n\r\n    const imageBodyTemplate = (rowData) => {\r\n        return (\r\n         \r\n           <Barcode width=\"1\" height=\"30\" value={rowData.id} />\r\n            \r\n        )\r\n    }\r\n\r\n    const priceBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">Price</span>\r\n                {formatCurrency(rowData.price)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    const categoryBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">Category</span>\r\n                {rowData.category}\r\n            </>\r\n        );\r\n    }\r\n\r\n    const ratingBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">Reviews</span>\r\n                <Rating value={rowData.rating} readonly cancel={false} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    const statusBodyTemplate = (rowData) => {\r\n        return (\r\n            <>\r\n                <span className=\"p-column-title\">Status</span>\r\n                <span className={`product-badge status-${rowData.brand.toLowerCase()}`}>{rowData.brand}</span>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const actionBodyTemplate = (rowData) => {\r\n        return (\r\n            <div className=\"actions flex p-justify-content-center\">\r\n                <Button icon=\"pi pi-pencil\" className=\"p-button-rounded p-button-success mr-2\" onClick={() => editProduct(rowData)} />\r\n                <Button icon=\"pi pi-trash\" className=\"p-button-rounded p-button-warning mt-2\" onClick={() => confirmDeleteProduct(rowData)} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const header = (\r\n        <div className=\"flex flex-column md:flex-row md:justify-content-between md:align-items-center\">\r\n            <h5 className=\"m-0\">Manage Products</h5>\r\n            <span className=\"block mt-2 md:mt-0 p-input-icon-left\">\r\n                <i className=\"pi pi-search\" />\r\n                <InputText type=\"search\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder=\"Search...\" />\r\n            </span>\r\n        </div>\r\n    );\r\n\r\n    const productDialogFooter = (\r\n        <>\r\n            <Button label=\"Cancel\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDialog} />\r\n            <Button label=\"Save\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={saveProduct} />\r\n        </>\r\n    );\r\n    const deleteProductDialogFooter = (\r\n        <>\r\n            <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteProductDialog} />\r\n            <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteProduct} />\r\n        </>\r\n    );\r\n    const deleteProductsDialogFooter = (\r\n        <>\r\n            <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteProductsDialog} />\r\n            <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteSelectedProducts} />\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <div className=\"grid crud-demo\">\r\n            <div className=\"col-12\">\r\n                <div className=\"card\">\r\n                    <Toast ref={toast} />\r\n                    <Toolbar className=\"mb-4\" left={leftToolbarTemplate} right={rightToolbarTemplate}></Toolbar>\r\n\r\n                    <DataTable ref={dt} value={products} selection={selectedProducts} onSelectionChange={(e) => setSelectedProducts(e.value)}\r\n                        dataKey=\"id\" paginator rows={10} rowsPerPageOptions={[5, 10, 25]} className=\"datatable-responsive\"\r\n                        paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                        currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} products\"\r\n                        globalFilter={globalFilter} emptyMessage=\"No products found.\" header={header} responsiveLayout=\"scroll\">\r\n                        <Column selectionMode=\"multiple\" headerStyle={{ width: '3rem'}}></Column>\r\n                        <Column field=\"code\" header=\"Code\" sortable body={codeBodyTemplate} ></Column>\r\n                        <Column field=\"title\" header=\"Name\" sortable body={nameBodyTemplate} ></Column>\r\n                       \r\n                        <Column field=\"price\" header=\"Price\" body={priceBodyTemplate} sortable ></Column>\r\n                        <Column field=\"category\" header=\"Category\" sortable body={categoryBodyTemplate} ></Column>\r\n                       \r\n                        <Column field=\"inventoryStatus\" header=\"Status\" body={statusBodyTemplate} sortable ></Column>\r\n                        <Column header=\"Image\" body={imageBodyTemplate} headerStyle={{ width: '5%', minWidth: '2rem' }}></Column>\r\n                        <Column body={actionBodyTemplate}></Column>\r\n                    </DataTable>\r\n\r\n                    <Dialog visible={productDialog} style={{ width: '450px' }} header=\"Product Details\" modal className=\"p-fluid\" footer={productDialogFooter} onHide={hideDialog}>\r\n                        { <Barcode value={product.code}/>}\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"title\">Name</label>\r\n                            <InputText id=\"title\" value={product.title} onChange={(e) => onInputChange(e, 'title')} required autoFocus className={classNames({ 'p-invalid': submitted && !product.title })} />\r\n                            {submitted && !product.title && <small className=\"p-invalid\">Name is required.</small>}\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"description\">Description</label>\r\n                            <InputTextarea id=\"description\" value={product.description} onChange={(e) => onInputChange(e, 'description')} required rows={3} cols={20} />\r\n                        </div>\r\n\r\n                        <div className=\"field\">\r\n                            <label className=\"mb-3\">Category</label>\r\n                            <div className=\"formgrid grid\">\r\n                                <div className=\"field-radiobutton col-6\">\r\n                                    <RadioButton inputId=\"category1\" name=\"category\" value=\"Accessories\" onChange={onCategoryChange} checked={product.category === 'Accessories'} />\r\n                                    <label htmlFor=\"category1\">Accessories</label>\r\n                                </div>\r\n                                <div className=\"field-radiobutton col-6\">\r\n                                    <RadioButton inputId=\"category2\" name=\"category\" value=\"Clothing\" onChange={onCategoryChange} checked={product.category === 'Clothing'} />\r\n                                    <label htmlFor=\"category2\">Clothing</label>\r\n                                </div>\r\n                                <div className=\"field-radiobutton col-6\">\r\n                                    <RadioButton inputId=\"category3\" name=\"category\" value=\"Electronics\" onChange={onCategoryChange} checked={product.category === 'Electronics'} />\r\n                                    <label htmlFor=\"category3\">Electronics</label>\r\n                                </div>\r\n                                <div className=\"field-radiobutton col-6\">\r\n                                    <RadioButton inputId=\"category4\" name=\"category\" value=\"Fitness\" onChange={onCategoryChange} checked={product.category === 'Fitness'} />\r\n                                    <label htmlFor=\"category4\">Fitness</label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"formgrid grid\">\r\n                            <div className=\"field col\">\r\n                                <label htmlFor=\"price\">Price</label>\r\n                                <InputNumber id=\"price\" value={product.price} onValueChange={(e) => onInputNumberChange(e, 'price')} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n                            </div>\r\n                            <div className=\"field col\">\r\n                                <label htmlFor=\"quantity\">Quantity</label>\r\n                                <InputNumber id=\"quantity\" value={product.quantity} onValueChange={(e) => onInputNumberChange(e, 'quantity')} integeronly />\r\n                            </div>\r\n                        </div>\r\n                    </Dialog>\r\n\r\n                    <Dialog visible={deleteProductDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteProductDialogFooter} onHide={hideDeleteProductDialog}>\r\n                        <div className=\"flex align-items-center justify-content-center\">\r\n                            <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem' }} />\r\n                            {product && <span>Are you sure you want to delete <b>{product.title}</b>?</span>}\r\n                        </div>\r\n                    </Dialog>\r\n\r\n                    <Dialog visible={deleteProductsDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteProductsDialogFooter} onHide={hideDeleteProductsDialog}>\r\n                        <div className=\"flex align-items-center justify-content-center\">\r\n                            <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem' }} />\r\n                            {product && <span>Are you sure you want to delete the selected products?</span>}\r\n                        </div>\r\n                    </Dialog>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst comparisonFn = function (prevProps, nextProps) {\r\n    return prevProps.location.pathname === nextProps.location.pathname;\r\n};\r\n\r\nexport default React.memo(CrudProducts, comparisonFn);",{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":8,"column":10,"nodeType":"116","messageId":"117","endLine":8,"endColumn":16},{"ruleId":"114","severity":1,"message":"118","line":12,"column":10,"nodeType":"116","messageId":"117","endLine":12,"endColumn":21},{"ruleId":"114","severity":1,"message":"119","line":174,"column":11,"nodeType":"116","messageId":"117","endLine":174,"endColumn":30},{"ruleId":"120","severity":1,"message":"121","line":344,"column":164,"nodeType":"122","endLine":344,"endColumn":185},{"ruleId":"110","replacedBy":"123"},{"ruleId":"112","replacedBy":"124"},{"ruleId":"114","severity":1,"message":"125","line":5,"column":10,"nodeType":"116","messageId":"117","endLine":5,"endColumn":17},{"ruleId":"114","severity":1,"message":"126","line":13,"column":10,"nodeType":"116","messageId":"117","endLine":13,"endColumn":21},{"ruleId":"114","severity":1,"message":"127","line":13,"column":23,"nodeType":"116","messageId":"117","endLine":13,"endColumn":37},{"ruleId":"114","severity":1,"message":"128","line":14,"column":10,"nodeType":"116","messageId":"117","endLine":14,"endColumn":18},{"ruleId":"114","severity":1,"message":"129","line":14,"column":20,"nodeType":"116","messageId":"117","endLine":14,"endColumn":31},{"ruleId":"110","replacedBy":"130"},{"ruleId":"112","replacedBy":"131"},{"ruleId":"114","severity":1,"message":"132","line":2,"column":10,"nodeType":"116","messageId":"117","endLine":2,"endColumn":21},{"ruleId":"114","severity":1,"message":"133","line":3,"column":10,"nodeType":"116","messageId":"117","endLine":3,"endColumn":21},{"ruleId":"114","severity":1,"message":"134","line":5,"column":9,"nodeType":"116","messageId":"117","endLine":5,"endColumn":15},{"ruleId":"114","severity":1,"message":"135","line":11,"column":12,"nodeType":"116","messageId":"117","endLine":11,"endColumn":18},{"ruleId":"114","severity":1,"message":"136","line":53,"column":11,"nodeType":"116","messageId":"117","endLine":53,"endColumn":25},{"ruleId":"114","severity":1,"message":"137","line":57,"column":11,"nodeType":"116","messageId":"117","endLine":57,"endColumn":25},{"ruleId":"114","severity":1,"message":"138","line":97,"column":11,"nodeType":"116","messageId":"117","endLine":97,"endColumn":22},{"ruleId":"110","replacedBy":"139"},{"ruleId":"112","replacedBy":"140"},{"ruleId":"114","severity":1,"message":"141","line":3,"column":10,"nodeType":"116","messageId":"117","endLine":3,"endColumn":20},{"ruleId":"114","severity":1,"message":"142","line":4,"column":10,"nodeType":"116","messageId":"117","endLine":4,"endColumn":14},{"ruleId":"114","severity":1,"message":"143","line":6,"column":10,"nodeType":"116","messageId":"117","endLine":6,"endColumn":18},{"ruleId":"110","replacedBy":"144"},{"ruleId":"112","replacedBy":"145"},{"ruleId":"110","replacedBy":"146"},{"ruleId":"112","replacedBy":"147"},{"ruleId":"110","replacedBy":"148"},{"ruleId":"112","replacedBy":"149"},{"ruleId":"114","severity":1,"message":"150","line":1,"column":27,"nodeType":"116","messageId":"117","endLine":1,"endColumn":34},{"ruleId":"114","severity":1,"message":"151","line":3,"column":10,"nodeType":"116","messageId":"117","endLine":3,"endColumn":15},{"ruleId":"114","severity":1,"message":"152","line":47,"column":9,"nodeType":"116","messageId":"117","endLine":47,"endColumn":20},{"ruleId":"114","severity":1,"message":"153","line":236,"column":11,"nodeType":"116","messageId":"117","endLine":236,"endColumn":29},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-unused-vars","'Rating' is defined but never used.","Identifier","unusedVar","'InputNumber' is defined but never used.","'onInputNumberChange' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["154"],["155"],"'history' is defined but never used.","'showMessage' is assigned a value but never used.","'setShowMessage' is assigned a value but never used.","'formData' is assigned a value but never used.","'setFormData' is assigned a value but never used.",["154"],["155"],"'RadioButton' is defined but never used.","'InputSwitch' is defined but never used.","'Button' is defined but never used.","'scales' is assigned a value but never used.","'decrementScale' is assigned a value but never used.","'incrementScale' is assigned a value but never used.","'changeTheme' is assigned a value but never used.",["154"],["155"],"'classNames' is defined but never used.","'icon' is defined but never used.","'pharmacy' is defined but never used.",["154"],["155"],["154"],["155"],["154"],["155"],"'useMemo' is defined but never used.","'Route' is defined but never used.","'userActions' is assigned a value but never used.","'ratingBodyTemplate' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]